using GoldenTicket.Database;
using GoldenTicket.Entities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace GoldenTicket.Models
{
    public static class ChatroomQueryHelper
    {
        public static IQueryable<Chatroom> BuildBaseChatroomQuery(this IQueryable<Chatroom> query, bool includeMessages = false)
        {
            var baseQuery = query
                .AsNoTracking()
                .Include(c => c.Members)
                    .ThenInclude(m => m.Member)
                        .ThenInclude(t => t!.Role)
                .Include(c => c.Members)
                    .ThenInclude(m => m.Member)
                        .ThenInclude(t => t!.AssignedTags)
                            .ThenInclude(t => t!.MainTag)
                .Include(c => c.Messages)
                    .ThenInclude(m => m.Sender)
                        .ThenInclude(u => u!.Role)
                .Include(c => c.Messages)
                    .ThenInclude(m => m.Sender)
                        .ThenInclude(u => u!.AssignedTags)
                            .ThenInclude(t => t!.MainTag)
                .Include(c => c.Ticket)
                    .ThenInclude(t => t!.Author)
                        .ThenInclude(t => t!.Role)
                .Include(c => c.Ticket)
                    .ThenInclude(t => t!.Author)
                        .ThenInclude(t => t!.AssignedTags)
                            .ThenInclude(t => t!.MainTag)
                .Include(c => c.Ticket)
                    .ThenInclude(t => t!.Assigned)
                        .ThenInclude(t => t!.Role)
                .Include(c => c.Ticket)
                    .ThenInclude(t => t!.Assigned)
                        .ThenInclude(t => t!.AssignedTags)
                            .ThenInclude(t => t!.MainTag)
                .Include(c => c.Ticket)
                    .ThenInclude(t => t!.ticketHistories)
                        .ThenInclude(t => t!.Action)
                .Include(c => c.Ticket)
                    .ThenInclude(t => t!.MainTag)
                .Include(c => c.Ticket)
                    .ThenInclude(t => t!.SubTag)
                .Include(c => c.Ticket)
                    .ThenInclude(t => t!.Status)
                .Include(c => c.Ticket)
                    .ThenInclude(t => t!.Priority)
                .Include(c => c.Author)
                    .ThenInclude(t => t!.Role)
                .Include(c => c.Author)
                    .ThenInclude(t => t!.AssignedTags)
                        .ThenInclude(t => t!.MainTag)
                .AsSplitQuery();
            if (includeMessages)
            {
                baseQuery = baseQuery
                    .AsNoTracking()
                    .Include(c => c.Members)
                        .ThenInclude(m => m.Member)
                            .ThenInclude(t => t!.Role)
                    .Include(c => c.Members)
                        .ThenInclude(m => m.Member)
                            .ThenInclude(t => t!.AssignedTags)
                                .ThenInclude(t => t!.MainTag)
                    .Include(c => c.Ticket)
                        .ThenInclude(t => t!.Author)
                            .ThenInclude(t => t!.Role)
                    .Include(c => c.Ticket)
                        .ThenInclude(t => t!.Author)
                            .ThenInclude(t => t!.AssignedTags)
                                .ThenInclude(t => t!.MainTag)
                    .Include(c => c.Ticket)
                        .ThenInclude(t => t!.Assigned)
                            .ThenInclude(t => t!.Role)
                    .Include(c => c.Ticket)
                        .ThenInclude(t => t!.Assigned)
                            .ThenInclude(t => t!.AssignedTags)
                                .ThenInclude(t => t!.MainTag)
                    .Include(c => c.Ticket)
                        .ThenInclude(t => t!.ticketHistories)
                            .ThenInclude(t => t!.Action)
                    .Include(c => c.Ticket)
                        .ThenInclude(t => t!.MainTag)
                    .Include(c => c.Ticket)
                        .ThenInclude(t => t!.SubTag)
                    .Include(c => c.Ticket)
                        .ThenInclude(t => t!.Status)
                    .Include(c => c.Ticket)
                        .ThenInclude(t => t!.Priority)
                    .Include(c => c.Author)
                        .ThenInclude(t => t!.Role)
                    .Include(c => c.Author)
                        .ThenInclude(t => t!.AssignedTags)
                            .ThenInclude(t => t!.MainTag)
                    .AsSplitQuery();
            }
            return baseQuery;
        }
        public static IQueryable<Rating> BuildBaseRatingQuery(this IQueryable<Rating> query)
        {
            var baseQuery = query
                .AsNoTracking()
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Members)
                        .ThenInclude(m => m.Member)
                            .ThenInclude(t => t!.Role)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Members)
                        .ThenInclude(m => m.Member)
                            .ThenInclude(t => t!.AssignedTags)
                                .ThenInclude(t => t!.MainTag)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Ticket)
                        .ThenInclude(t => t!.Author)
                            .ThenInclude(t => t!.Role)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Ticket)
                        .ThenInclude(t => t!.Author)
                            .ThenInclude(t => t!.AssignedTags)
                                .ThenInclude(t => t!.MainTag)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Ticket)
                        .ThenInclude(t => t!.Assigned)
                            .ThenInclude(t => t!.Role)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Ticket)
                        .ThenInclude(t => t!.Assigned)
                            .ThenInclude(t => t!.AssignedTags)
                                .ThenInclude(t => t!.MainTag)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Ticket)
                        .ThenInclude(t => t!.MainTag)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Ticket)
                        .ThenInclude(t => t!.SubTag)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Ticket)
                        .ThenInclude(t => t!.ticketHistories)
                            .ThenInclude(t => t!.Action)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Ticket)
                        .ThenInclude(t => t!.Status)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Ticket)
                        .ThenInclude(t => t!.Priority)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Messages)
                        .ThenInclude(m => m.Sender)
                            .ThenInclude(u => u!.Role)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Messages)
                        .ThenInclude(m => m.Sender)
                            .ThenInclude(u => u!.AssignedTags)
                                .ThenInclude(t => t!.MainTag)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Author)
                        .ThenInclude(t => t!.Role)
                .Include(c => c.Chatroom)
                    .ThenInclude(c => c!.Author)
                        .ThenInclude(t => t!.AssignedTags)
                            .ThenInclude(t => t!.MainTag)
                .AsSplitQuery();
            return baseQuery;
        }
    }
}